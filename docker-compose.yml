services:
  study-program:
    build:
      context: .
      dockerfile: ./apps/study-program/Dockerfile
      target: development
    command: npm run start:dev study-program
    env_file:
      - ./apps/study-program/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
  # student-management:
  #   build:
  #     context: .
  #     dockerfile: ./apps/student-management/Dockerfile
  #     target: development
  #   command: npm run start:dev student-management
  #   env_file:
  #     - ./apps/student-management/.env
  #   depends_on:
  #     - mongodb-primary
  #     - mongodb-secondary
  #     - mongodb-arbiter
  #     - rabbitmq
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   ports:
  #     - '3003:3003'
  test-program:
    build:
      context: .
      dockerfile: ./apps/test-program/Dockerfile
      target: development
    command: npm run start:dev test-program
    env_file:
      - ./apps/test-program/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3004:3004'
  class-management:
    build:
      context: .
      dockerfile: ./apps/class-management/Dockerfile
      target: development
    command: npm run start:dev class-management
    env_file:
      - ./apps/class-management/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'
  module-management:
    build:
      context: .
      dockerfile: ./apps/module-management/Dockerfile
      target: development
    command: npm run start:dev module-management
    env_file:
      - ./apps/module-management/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3002:3002'
  rabbitmq:
    image: rabbitmq
    ports: 
      - '5672:5672'
  mongodb-primary:
    image: docker.io/bitnami/mongodb:5.0
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    volumes:
      - 'mongodb_master_data:/bitnami/mongodb'
    ports:
      - '27017:27017'

  mongodb-secondary:
    image: docker.io/bitnami/mongodb:5.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123

  mongodb-arbiter:
    image: docker.io/bitnami/mongodb:5.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123

volumes:
  mongodb_master_data:
    driver: local